@page "/RInventario"
@inject HttpClient Http
@inject LocalData _localdata
@using Models

<div class="container">


    <EditForm Model="Articulo">
        <div>
            <span class="text-danger">@Mensaje</span>
        </div>
        <div class="form-row">

            <div class="form-group col-3">
                <label>IdArticulo</label>
                <InputNumber class="form-control" @bind-Value="Articulo.IdArticulo"></InputNumber>

            </div>

            <div class="form-group col-3">
                <label>C&oacute;digo</label>
                <InputText class="form-control" @bind-Value="Articulo.Codigo"></InputText>
            </div>

            <div class="form-group col-3">
                <label>Descripci&ocirc;n </label>
                <InputText class="form-control" @bind-Value="Articulo.Descripcion"></InputText>
            </div>

            <div class="form-group col-3">
                <label>Existencia</label>
                <InputNumber class="form-control" @bind-Value="Articulo.Existencia"></InputNumber>
            </div>
        </div>

        <div class="form-group">
            <button class="btn btn-info" @onclick="BuscarArticulo">Buscar</button>
            <button class="btn btn-primary" @onclick="Guardar">Guardar</button>
            @*<button class="btn btn-success" @onclick="Bus">Syncronizar</button>*@
        </div>



        <div class="form-group">
            <button class="btn btn-info" @onclick="BuscarArticulosLocal ">Buscar Listado</button>
        </div>


        @if (Animacion)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }



        @if (ListadoArticulos != null && ListadoArticulos.Count > 0)
        {
            <div class="">

                <table class="table">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">IdArticulos</th>
                            <th scope="col">C&oacute;digo</th>
                            <th scope="col">Descripci&oacute;n</th>
                            <th scope="col">Existencia</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ListadoArticulos)
                        {
                            <tr>
                                <th scope="row">@item.IdArticulo</th>
                                <td>@item.Codigo</td>
                                <td>@item.Descripcion</td>
                                <td>@item.Existencia</td>
                            </tr>

                        }


                    </tbody>
                </table>

            </div>
        }




    </EditForm>

    <div>

    </div>

</div>


@code {

    public bool Animacion { get; set; } = false;

    public Articulos Articulo { get; set; } = new Articulos();

    public List<Articulos> ListadoArticulos { get; set; }

    public string Mensaje { get; set; }


    public async Task Guardar()
    {
        Mensaje = string.Empty;

        try
        {
            Animacion = true;

            ListadoArticulos.Remove(ListadoArticulos.Where(A => A.IdArticulo == Articulo.IdArticulo).FirstOrDefault());

            ListadoArticulos.Add(Articulo);

            ListadoArticulos = ListadoArticulos.OrderBy(A => A.Descripcion).ToList();

            Articulo = new Articulos();

            Animacion = false;


            _localdata.SetInstance(ListadoArticulos);
        }
        catch (Exception ex)
        {

            Mensaje = $"{ex.Message} - {ex.InnerException}";
        }


    }

    public async Task Syncronizar()
    {
        Mensaje = string.Empty;
        try
        {
            Animacion = true;


            foreach (var item in ListadoArticulos)
            {
                await Http.PutAsJsonAsync($@" https://assemblyapi.azurewebsites.net/api/Articulos/{item.IdArticulo}", item);
            }

            Animacion = false;
        }
        catch (Exception ex)
        {

            Mensaje = $"{ex.Message} - {ex.InnerException}";
        }



    }



    public async Task BuscarArticulo()
    {

        Mensaje = string.Empty;
        try
        {
            if (ListadoArticulos != null)
                Articulo = ListadoArticulos.Where(A => A.IdArticulo == Articulo.IdArticulo).FirstOrDefault();
        }
        catch (Exception ex)
        {

            Mensaje = $"{ex.Message} - {ex.InnerException}";
        }

    }


    public async Task BuscarArticulosLocal()
    {

        try
        {
            Animacion = true;

            ListadoArticulos = _localdata.GetInstance();

            Animacion = false;
        }
        catch (Exception ex)
        {

            Mensaje = $"{ex.Message} - {ex.InnerException}";
        }

    }
    public async Task BuscarArticulos()
    {

        Mensaje = string.Empty;
        try
        {
            Animacion = true;
            ListadoArticulos = await Http.GetFromJsonAsync<List<Articulos>>(@" https://assemblyapi.azurewebsites.net/api/Articulos");

            ListadoArticulos = ListadoArticulos.OrderBy(A => A.Descripcion).ToList();

            Animacion = false;

            var data = _localdata.GetInstance();

            data = ListadoArticulos;
        }
        catch (Exception ex)
        {

            Mensaje = $"{ex.Message} - {ex.InnerException}";
        }

    }



}
